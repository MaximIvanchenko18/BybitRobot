from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import config
from logs.logger import get_logger
from session import active_users

class TelegramBot:
    def __init__(self, token):
        self.bot = TeleBot(token)
        self.logger = get_logger('telegramBot')
        self.available_tickers = config.AVAILABLE_TICKERS
        self.available_timeframes = config.AVAILABLE_TIMEFRAMES
        self.user_state = {}
        self.temp_strategy_data = {}

        # –ö–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.start_handler)
        self.bot.message_handler(commands=['main'])(self.go_main_menu)
        self.bot.message_handler(commands=['help'])(self.send_help)

        # –ö–Ω–æ–ø–∫–∏
        self.bot.callback_query_handler(func=lambda call: call.data == "connect_exchange")(self.connect_exchange)
        self.bot.callback_query_handler(func=lambda call: call.data == "confirm_API")(self.confirm_api_keys)
        self.bot.callback_query_handler(func=lambda call: call.data == "rewrite_API")(self.connect_exchange)

        self.bot.callback_query_handler(func=lambda call: call.data == "set_new_strategy")(self.set_new_strategy)
        self.bot.message_handler(func=lambda msg: msg.text in self.available_tickers)(self.set_coin)
        self.bot.message_handler(func=lambda msg: msg.text in self.available_timeframes)(self.set_timeframe)
        self.bot.callback_query_handler(func=lambda call: call.data == "save_strategy")(self.save_strategy)
        self.bot.callback_query_handler(func=lambda call: call.data == "discard_strategy_changes")(self.go_main_menu_callback)

        self.bot.callback_query_handler(func=lambda call: call.data == "saved_strategies_list")(self.show_strategies)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("strategy_"))(self.handle_strategy_action)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("select_strategy_"))(self.select_strategy_action)
        self.bot.message_handler(func=lambda msg: msg.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–±–æ—Ç–∞")(self.stop_bot)

        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.bot.message_handler(func=lambda msg: True)(self.handle_user_input)

    def start_handler(self, message):
        try:
            user_id = message.chat.id
            self.user_state[user_id] = {}
            self.temp_strategy_data[user_id] = {}
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ", callback_data="connect_exchange"))

            self.bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Bybit.\n–ù—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ Bybit, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=keyboard)
            self.logger.info(f'New user started: {message.chat.id}')
        except Exception as err:
            print(err)
            self.logger.error(f"Error while starting bot for user {message.chat.id}: {err}")

    def connect_exchange(self, call):
        try:
            self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
            self.user_state[call.message.chat.id] = {'step': 'awaiting_api_key'}
            self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –æ—Ç Bybit:", reply_markup=types.ReplyKeyboardRemove())
        except Exception as err:
            print(err)
            self.logger.error(f"Error while connecting to Bybit for user {call.message.chat.id}: {err}")

    def confirm_api_keys(self, call):
        try:
            self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
            state = self.user_state.get(call.message.chat.id, {})
            # TODO: –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ Bybit API
            valid = True  # –ó–∞–≥–ª—É—à–∫–∞

            if valid:
                state['verified'] = True
                self.bot.send_message(call.message.chat.id, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
                self.logger.info(f'New user registered: {call.message.chat.id}')
                self.go_main_menu(call.message)
            else:
                self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏ –∑–∞–Ω–æ–≤–æ.")
                self.connect_exchange(call.message)
        except Exception as err:
            print(err)
            self.logger.error(f"Error while confirming API keys for user {call.message.chat.id}: {err}")

    def go_main_menu(self, message):
        try:
            user_id = message.chat.id
            state = self.user_state.get(user_id, {})

            if not state.get('verified') or state.get('verified') == False:
                self.bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ Bybit!")
                return

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("‚ûï –ó–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="set_new_strategy"))
            # TODO: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Üí –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "üìÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            keyboard.add(InlineKeyboardButton("üìÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", callback_data="saved_strategies_list"))

            self.bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            self.user_state[user_id]['step'] = 'main_menu'
        except Exception as err:
            print(err)
            self.logger.error(f"Error in main menu for user {message.chat.id}: {err}")

    def go_main_menu_callback(self, call):
        self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
        self.go_main_menu(call.message)

    def send_help(self, message):
        text = (
            f"üìò –ö–æ–º–∞–Ω–¥—ã:\n"
            f"/start ‚Äî –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–æ–±–æ—Ç–∞ —Å –Ω—É–ª—è (–¥–æ –≤–≤–µ–¥–µ–Ω–∏—è API –∫–ª—é—á–µ–π)\n"
            f"/main ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏ –≤—ã–±–æ—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –í–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)\n"
            f"/help ‚Äî –í—ã–∑–æ–≤ —Ç–µ–∫—É—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        )

        self.bot.send_message(message.chat.id, text)

    def set_new_strategy(self, call):
        try:
            self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
            self.temp_strategy_data[call.message.chat.id] = {'id': -1}
            self.user_state[call.message.chat.id]['step'] = 'awaiting_coin'

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            row_width = 6
            for i in range(0, len(self.available_tickers), row_width):
                keyboard.row(*[types.KeyboardButton(btn) for btn in self.available_tickers[i:i+row_width]])

            self.bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=keyboard)
        except Exception as err:
            print(err)
            self.logger.error(f"Error after hitting new strategy for user {call.message.chat.id}: {err}")

    def set_coin(self, message):
        self.temp_strategy_data[message.chat.id]['coin'] = message.text
        self.user_state[message.chat.id]['step'] = 'awaiting_leverage'

        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):", reply_markup=types.ReplyKeyboardRemove())

    def set_timeframe(self, message):
        self.temp_strategy_data[message.chat.id]['timeframe'] = message.text
        self.user_state[message.chat.id]['step'] = 'awaiting_percent'

        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ (1-100). –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–ª –Ω–µ –º–µ–Ω–µ–µ 100$:", reply_markup=types.ReplyKeyboardRemove())

    def save_strategy(self, call):
        self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
        user_id = call.message.chat.id
        strat = self.temp_strategy_data[user_id]
        strat_id = strat.get('id', -1)

        if strat_id == -1: # –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            pass # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î
        else: # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            pass # TODO: –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î

        self.bot.send_message(user_id, f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        self.logger.info(f"Strategy saved for user {user_id}: {strat}")

        self.go_main_menu(call.message)

    def show_strategies(self, call):
        self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
        # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = call.message.chat.id
        strategies = [
            {'id': 1, 'coin': 'BNBUSDT', 'lev': 4, 'tf': '1–º', 'pct': 50},
            {'id': 2, 'coin': 'BNBUSDT', 'lev': 3, 'tf': '1—á', 'pct': 30},
        ]  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î

        keyboard = InlineKeyboardMarkup()

        for strat in strategies:
            name = f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Ññ{strat['id']} ({strat['coin']}, {strat['lev']}lev, {strat['tf']}, {strat['pct']}%)"
            callback_data = f"select_strategy_{strat['id']}"
            keyboard.add(InlineKeyboardButton(name, callback_data=callback_data))

        self.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", reply_markup=keyboard)

    def select_strategy_action(self, call):
        self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
        user_id = call.message.chat.id
        strat_id = int(call.data.replace("select_strategy_", ""))

        self.user_state[user_id]['step'] = 'strategy_menu'
        self.user_state[user_id]['selected_strategy'] = strat_id

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"strategy_run_{strat_id}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"strategy_edit_{strat_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"strategy_delete_{strat_id}")
        )

        self.bot.send_message(user_id, f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Ññ{strat_id}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)

    def handle_strategy_action(self, call):
        self.bot.answer_callback_query(call.id)  # —É–±–∏—Ä–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É
        user_id = call.message.chat.id

        if call.data.startswith("strategy_run_"):
            strat_id = int(call.data.replace("strategy_run_", ""))

            # üü° –ó–∞–≥–ª—É—à–∫–∞ –∑–∞–ø—É—Å–∫–∞
            active_users[user_id] = strat_id

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–±–æ—Ç–∞"))

            self.logger.info(f'Bot started working for user: {call.message.chat.id}')
            self.bot.send_message(user_id, f"‚úÖ –†–æ–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Ññ{strat_id}", reply_markup=keyboard)

        elif call.data.startswith("strategy_edit_"):
            strat_id = int(call.data.replace("strategy_edit_", ""))

            self.user_state[user_id]['step'] = 'awaiting_coin'
            self.temp_strategy_data[user_id] = {'id': strat_id}
            
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            row_width = 6
            for i in range(0, len(self.available_tickers), row_width):
                keyboard.row(*[types.KeyboardButton(btn) for btn in self.available_tickers[i:i+row_width]])

            self.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=keyboard)

        elif call.data.startswith("strategy_delete_"):
            strat_id = int(call.data.replace("strategy_delete_", ""))

            # üü° –ó–∞–≥–ª—É—à–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è

            self.bot.send_message(user_id, f"üóë –°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Ññ{strat_id} —É–¥–∞–ª–µ–Ω–∞")
            self.go_main_menu(call.message)

    def stop_bot(self, message):
        try:
            user_id = message.chat.id

            del active_users[user_id]
            self.logger.info(f'Bot stopped working for user: {message.chat.id}')
            self.bot.send_message(user_id, "–†–æ–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
        except Exception as err:
            print(err)
            self.logger.error('Error while trying to stop robot.')

        self.go_main_menu(message)

    def handle_user_input(self, message):
        state = self.user_state.get(message.chat.id, {}).get('step')
        user_id = message.chat.id

        if state == 'awaiting_api_key':
            self.user_state[user_id]['api_key'] = message.text.strip()
            self.user_state[user_id]['step'] = 'awaiting_api_secret'

            self.bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API —Å–µ–∫—Ä–µ—Ç:")
        elif state == 'awaiting_api_secret':
            self.user_state[user_id]['api_secret'] = message.text.strip()

            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_API"),
                InlineKeyboardButton("üîÅ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="rewrite_API")
            )

            self.bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=keyboard)
        elif state == 'awaiting_leverage':
            if message.text.strip().isdigit() and int(message.text.strip()) > 0:
                leverage = int(message.text.strip())
                max_leverage = 100 # !!! –ù—É–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ Bybit
                if leverage <= max_leverage:
                    self.temp_strategy_data[user_id]['leverage'] = int(message.text.strip())
                    self.user_state[user_id]['step'] = 'awaiting_timeframe'

                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    row_width = 6
                    for i in range(0, len(self.available_timeframes), row_width):
                        keyboard.row(*[types.KeyboardButton(btn) for btn in self.available_timeframes[i:i+row_width]])

                    self.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=keyboard)
                else:
                    self.bot.send_message(user_id, f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_leverage}.")
            else:
                self.bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–µ—á–∞.")
        elif state == 'awaiting_percent':
            if message.text.strip().isdigit():
                percent = int(message.text.strip())
                if 1 <= percent <= 100:
                    self.temp_strategy_data[user_id]['percent'] = percent

                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_strategy"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="discard_strategy_changes")
                    )

                    self.bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é?", reply_markup=keyboard)
                else:
                    self.bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
            else:
                self.bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞.")
        else:
            self.bot.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.")

    def send_message_to_user(self, chat_id, text):
        try:
            self.bot.send_message(chat_id, text)
            self.logger.info(f"Sent message to user {chat_id}")
        except Exception as err:
            print(err)
            self.logger.error(f"Failed to send message to {chat_id}: {err}")

    def run(self):
        try:
            print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            self.logger.info(f'Telegram-bot is activated!')
            self.bot.polling(none_stop=True)
        except Exception as err:
            print(err)
            self.logger.error('Cannot activate Telegram-bot')
